
@using MFaaP.MFWSClient
@using SanityM_Files.Models;
@{

    List<dynamic> propertyList = new List<dynamic>();
    List<PropertyDef> Properties = new List<PropertyDef>();
    Properties = ViewBag.PropertyList;
    List<ExtendedObjectClass> Classes = new List<ExtendedObjectClass>();
    Classes = ViewBag.classes;

    CObjects mp = new CObjects();

    var RestrictedProperties = new List<string>();
    RestrictedProperties.Add("20");
    RestrictedProperties.Add("21");
    RestrictedProperties.Add("22");
    RestrictedProperties.Add("23");
    RestrictedProperties.Add("24");
    RestrictedProperties.Add("25");
    RestrictedProperties.Add("30");
    RestrictedProperties.Add("31");
    RestrictedProperties.Add("32");
    RestrictedProperties.Add("81");
    RestrictedProperties.Add("89");
    RestrictedProperties.Add("101");


    if (!object.ReferenceEquals(null, ViewBag.MetaData))
    {
        propertyList = ViewBag.MetaData;
    }



}
@{
    var ID = ViewBag.ObjectID;
    var type = ViewBag.ObjectType;
}
<input type="hidden" id="ID" value="@ID"/>
<input type="hidden" id="type" value="@type" />
<table class="table table-bordered table-striped">
    <thead>
        <tr style="border-bottom:solid">
            <th scope="col">MetaData</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td colspan="5" scope="col">ID</td>

            <td scope="col"> @ID</td>

        </tr>
        <tr>
            <td colspan="5" scope="col" style="border:hidden">Object- @type</td>
            <td scope="col" style="border:hidden">Latest</td>
        </tr>
    </tbody>
</table>

<table class="table table-bordered table-striped" id="bindData">
    <tbody>
        @{
            //int Cid = 0;
            //if (Properties != null && Classes != null)
            //{
            //    var Mclass = propertyList.Where(x => x.PropertyDef == 100).ToList<PropertyValue>()[0];
            //    Cid = Convert.ToInt32(Mclass.TypedValue.SerializedValue);

            //    //var ac = objectClass

            //}
            //var objectClass = Classes.Where(x => x.ID == Cid).ToList<ExtendedObjectClass>();
            var list = new List<string>();
            var Id_List = "";
            foreach (var item in propertyList)
            {

                var asasa = item.PropertyDef.Value;
                var labelName = Properties.Where(x => x.ID == item.PropertyDef.Value).ToList<PropertyDef>();
                string DT = Convert.ToString(item.TypedValue.DataType.Value);

                if (!RestrictedProperties.Contains(item.PropertyDef.ToString()))
                {
                    <tr>
                        <td>

                            @labelName[0].Name
                        </td>
                        <td>

                            @{
                                var Valuelist = mp.GetPropertyValueList(labelName[0].ValueList);
                                switch (DT)
                                {
                                    case "1":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <input type="text" id="@labelName[0].ID" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;

                                    case "2":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <input type="number" id="@labelName[0].ID" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;

                                    case "3":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <input type="number" id="@labelName[0].ID" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;

                                    case "5":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        DateTime date1 = item.TypedValue.Value;
                                        string date = item.TypedValue.DisplayValue.Value;
                                        date = Convert.ToDateTime(date).ToString("yyyy-MM-dd");

                                        <input type="date" id="@labelName[0].ID" class="form-control" value="@date">
                                        break;

                                    case "6":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        string time = item.TypedValue.DisplayValue.Value;
                                        var time1 = item.TypedValue.Value;
                                        time = Convert.ToDateTime(time).ToString("HH:mm");

                                        <input type="time" id="@labelName[0].ID" class="form-control" value="@time">
                                        break;

                                    case "7":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        var value1 = item.TypedValue.Value;
                                        string value = item.TypedValue.DisplayValue.Value;
                                        value = Convert.ToDateTime(value.Replace('/', '-')).ToString("yyyy-MM-dd HH:mm");
                                        value = value.Replace(' ', 'T');

                                        <input type="datetime-local" id="@labelName[0].ID" class="form-control" value="@value">
                                        break;

                                    case "8":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';

                                        <select class="form-control" id="@labelName[0].ID" aria-label="Default select example">

                                            <option @(Convert.ToBoolean(item.TypedValue.Value)) ? "selected" : "") value="true">Yes</option>
                                            <option @((Convert.ToBoolean(item.TypedValue.Value)) ? "selected" : "") value="false">No</option>
                                        </select>
                                       // <input type="text" id="@labelName[0].ID" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;

                                    case "9":

                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <select class="form-control" id="@labelName[0].ID" aria-label="Default select example">

                                            @{
                                                foreach (var item1 in Valuelist.Items)
                                                {

                                                    <option @(item1.Name == item.TypedValue.DisplayValue.Value ? "selected" : "") value="@item1.ID">@item1.Name</option>

                                                }
                                            }
                                        </select>
                                        // <input type="text" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;

                                    case "10":

                                        string[] items = item.TypedValue.DisplayValue.Value.Split(';');
                                        var val = "";
                                        for (int i = 0; i < items.Length; i++)
                                        {
                                            string id = labelName[0].ID.ToString();
                                            if (items.Length > 1)
                                            {
                                                id = labelName[0].ID + "-" + i;
                                            }
                                            Id_List = Id_List + id + ';';
                                            <select class="form-control" id="@id" aria-label="Default select example">

                                                @{
                                                    foreach (var item1 in Valuelist.Items)
                                                    {
                                                        val = @item1.ID + "$";
                                                        <option @(item1.Name == items[i].Trim() ? "selected" : "") value="@item1.ID">@item1.Name</option>

                                                    }
                                                }
                                            </select>
                                        }
                                        //  <input type="hidden" id="@labelName[0].ID" value="@val" />
                                        break;

                                    case "11":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <input type="number" id="@labelName[0].ID" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;

                                    case "12":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <input type="text" id="@labelName[0].ID" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;

                                    case "13":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <textarea class="form-control" id="@labelName[0].ID" rows="4" cols="50">@item.TypedValue.DisplayValue.Value </textarea>
                                        break;

                                    case "14":
                                        Id_List = Id_List + labelName[0].ID.ToString() + ';';
                                        <input type="text" id="@labelName[0].ID" class="form-control" value="@item.TypedValue.DisplayValue.Value">
                                        break;



                                }

                            }
                        </td>


                    </tr>
                }
            }



        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="2"><button type="button" class="btn btn-primary btn-lg btn-block" onclick="UpdateData('@Id_List')">Update object</button></td>

        </tr>
    </tfoot>
</table>
